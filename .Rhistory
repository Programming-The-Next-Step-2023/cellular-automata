runApp('R')
runApp('R')
?a
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
library(livelycells)
play()
play()
runApp('R')
runApp('R')
play()
runApp('R')
play()
library(livelycells)
play()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
shiny::runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
usethis::use_testthat()
usethis::use_test("testworld")
usethis::use_test("livelycells")
usethis::use_testthat()
usethis::use_testthat("livelycells")
usethis::use_test("livelycells")
getwd()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
usethis::use_test("computations")
devtools::test()
devtools::test()
# Load test matrices
test_matrices = as.list(dir(path = "./data/test_matrices"))
for (i in 1:length(test_matrices)) {
file_path = paste0("./data/test_matrices/", test_matrices[i])
load(file_path)
}
devtools::test()
testthat::test_path()
devtools::test()
rlang::last_error()
getwd()
devtools::test()
source("./R/pixeltrix.R")
# Load test_matrices
test_matrices = as.list(dir(path = "./data/test_matrices"))
for (i in 1:length(test_matrices)) {
file_path = paste0("./data/test_matrices/", test_matrices[i])
load(file_path)
}
# neighbours() -----------------------------------------------------------------
# Counts living neighbours in a cellÂ´s Moore neighbourhood
neighbours <- function(matrix, row_index, col_index) {
living = 0
# Use try() because of cells at borders who have < 8 neighbour cells
# silent = TRUE because each matrix has border cells and will thus produce
# errors
try(
if (matrix[row_index - 1, col_index - 1]) living = living + 1,  # North-West
silent = TRUE
)
try(
if (matrix[row_index - 1, col_index]) living = living + 1,  # North
silent = TRUE
)
try(
if (matrix[row_index - 1, col_index + 1]) living = living + 1,  # North-East
silent = TRUE
)
try(
if (matrix[row_index, col_index - 1]) living = living + 1,  # West
silent = TRUE
)
try(
if (matrix[row_index, col_index + 1]) living = living + 1,  # East
silent = TRUE
)
try(
if (matrix[row_index + 1, col_index - 1]) living = living + 1,  # South-West
silent = TRUE
)
try(
if (matrix[row_index + 1, col_index]) living = living + 1,  # South
silent = TRUE
)
try(
if (matrix[row_index + 1, col_index + 1]) living = living + 1,  # South-East
silent = TRUE
)
return(living)
}
testthat::expect_equal(neighbours(border_north_east, 1, 1), 1)
test_matrices = as.list(dir(path = "./data/test_matrices"))
for (i in 1:length(test_matrices)) {
file_path = paste0("./data/test_matrices/", test_matrices[i])
load(file_path)
}
neighbours <- function(matrix, row_index, col_index) {
living = 0
# Use try() because of cells at borders who have < 8 neighbour cells
# silent = TRUE because each matrix has border cells and will thus produce
# errors
try(
if (matrix[row_index - 1, col_index - 1]) living = living + 1,  # North-West
silent = TRUE
)
try(
if (matrix[row_index - 1, col_index]) living = living + 1,  # North
silent = TRUE
)
try(
if (matrix[row_index - 1, col_index + 1]) living = living + 1,  # North-East
silent = TRUE
)
try(
if (matrix[row_index, col_index - 1]) living = living + 1,  # West
silent = TRUE
)
try(
if (matrix[row_index, col_index + 1]) living = living + 1,  # East
silent = TRUE
)
try(
if (matrix[row_index + 1, col_index - 1]) living = living + 1,  # South-West
silent = TRUE
)
try(
if (matrix[row_index + 1, col_index]) living = living + 1,  # South
silent = TRUE
)
try(
if (matrix[row_index + 1, col_index + 1]) living = living + 1,  # South-East
silent = TRUE
)
return(living)
}
testthat::expect_equal(neighbours(border_north_east, 1, 1), 1)
testthat::expect_equal(neighbours(border_north, 1, 5), 5)
testthat::expect_equal(neighbours(border_north, 1, 5), 6)
testthat::expect_equal(neighbours(border_north, 1, 5), 5)
testthat::expect_equal(neighbours(border_north_west, 1, 2), 1)
testthat::expect_equal(neighbours(border_west, 8, 1), 2)
testthat::expect_equal(neighbours(border_east, 8, 8), 2)
testthat::expect_equal(neighbours(border_south_west, 7, 8), 3)
testthat::expect_equal(neighbours(border_south, 3, 2), 1)
testthat::expect_equal(neighbours(border_south_east, 5, 1), 1)
# Load border cells
folder_path = paste0(testthat::test_path(), "/testdata/border_cells")
border_cells = as.list(dir(path = folder_path))
for (i in 1:length(border_cells)) {
file_path = paste0(folder_path, "/", border_cells[i])
load(file_path)
}
test_that("neighbours() returns correct number of living neighbour cells", {
expect_equal(neighbours(border_north_east, 1, 1), 1)
expect_equal(neighbours(border_north, 1, 5), 5)
expect_equal(neighbours(border_north_west, 1, 2), 1)
expect_equal(neighbours(border_west, 8, 1), 2)
expect_equal(neighbours(border_east, 8, 8), 2)
expect_equal(neighbours(border_south_west, 7, 8), 3)
expect_equal(neighbours(border_south, 3, 2), 1)
expect_equal(neighbours(border_south_east, 5, 1), 1)
})
test_that("neighbours() returns correct number of living neighbour cells", {
expect_equal(neighbours(border_north_east, 1, 1), 1)
expect_equal(neighbours(border_north, 1, 5), 5)
expect_equal(neighbours(border_north_west, 1, 2), 1)
expect_equal(neighbours(border_west, 8, 1), 2)
expect_equal(neighbours(border_east, 8, 8), 2)
expect_equal(neighbours(border_south_west, 7, 8), 3)
expect_equal(neighbours(border_south, 3, 2), 1)
expect_equal(neighbours(border_south_east, 5, 1), 1)
})
devtools::test()
# Source computations
source("/Users/vile/Documents/GitHub/livelycells/R/computations.R")
# Source computations
source("/Users/vile/Documents/GitHub/livelycells/R/computations.R")
devtools::test()
# Source computations
source("/Users/vile/Documents/GitHub/livelycells/R/computations.R")
# Load border cells
print("current wd:")
print(getwd())
folder_path = paste0(testthat::test_path(), "/testdata/border_cells")
border_cells = as.list(dir(path = folder_path))
for (i in 1:length(border_cells)) {
file_path = paste0(folder_path, "/", border_cells[i])
load(file_path)
}
test_that("neighbours() returns correct number of living neighbour cells", {
expect_equal(neighbours(border_north_east, 1, 1), 1)
expect_equal(neighbours(border_north, 1, 5), 5)
expect_equal(neighbours(border_north_west, 1, 2), 1)
expect_equal(neighbours(border_west, 8, 1), 2)
expect_equal(neighbours(border_east, 8, 8), 2)
expect_equal(neighbours(border_south_west, 7, 8), 3)
expect_equal(neighbours(border_south, 3, 2), 1)
expect_equal(neighbours(border_south_east, 5, 1), 1)
})
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
rules = extract_rules("B3/S012345678")
birth_rules = rules[[1]]
survival_rules = rules[[2]]
birth_rules
survival_rules
expect_equal(birth_rules, c(0, 1, 2, 3, 4, 5, 6, 7, 8))
expect_equal(survival_rules, c(0, 1, 2, 3, 4, 5, 6, 7, 8))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
# Still life: Block
mat2 = matrix(c(rep(0, 4), c(0, 1, 1, 0), c(0, 1, 1, 0), c(rep(0, 4)),
ncol = 4)
})
# Still life: Block
mat2 = matrix(c(rep(0, 4), c(0, 1, 1, 0), c(0, 1, 1, 0), c(rep(0, 4)),
ncol = 4))
print(mat2)
# Still life: Block
mat2 = matrix(c(rep(0, 4), c(0, 1, 1, 0), c(0, 1, 1, 0), c(rep(0, 4))),
ncol = 4)
mat2
devtools::test()
automaton(glider, "B3/S23", max_iterations = 100, speed = 15)
#
#
# Shiny Life-Like Cells: Computations
#
# all the vitals for an Automaton
# Source -----------------------------------------------------------------------
source("./R/computations.R")
source("./R/pixeltrix.R")
# Load test_matrices
test_matrices = as.list(dir(path = "./data/test_matrices"))
for (i in 1:length(test_matrices)) {
file_path = paste0("./data/test_matrices/", test_matrices[i])
load(file_path)
}
# automaton() ------------------------------------------------------------------
automaton <- function(input_matrix, rules, max_iterations, speed) {
iteration = 0
current_matrix = input_matrix
# Living border cells in the INITIAL matrix?
border_reached = evolve(current_matrix, rules)[[2]]
while (border_reached == FALSE && iteration < max_iterations) {
next_matrix = evolve(current_matrix, rules)[[1]]
# Living border cells in the NEXT matrix?
border_reached = evolve(current_matrix, rules)[[2]]
if (border_reached == TRUE) {
break
} else {
iteration = iteration + 1
print(paste0("Time: ", iteration))
draw_pixels(next_matrix)
current_matrix = next_matrix
Sys.sleep(1 / speed)
}
}
# End while loop
if (border_reached == TRUE) {
print(paste0("Border was reached."))
}
if (iteration >= max_iterations) {
print(paste0("Maximum number of iterations reached."))
}
return()  # placeholder for list which will contain values for GUI
}
draw_pixels(glider)
automaton(glider, "B3/S23", max_iterations = 100, speed = 15)
draw_pixels(glider)
automaton(glider, "B3/S23", max_iterations = 100, speed = 15)
usethis::use_test("automaton")
devtools::install()
library(livelycells)
library(livelycells)
play()
draw_pixels(glider)
draw_pixels(glider)
#
#
# Shiny Life-Like Cells: Computations
#
# all the vitals for an Automaton
# Source -----------------------------------------------------------------------
source("./R/computations.R")
source("./R/pixeltrix.R")
# Load test_matrices
test_matrices = as.list(dir(path = "./data/test_matrices"))
for (i in 1:length(test_matrices)) {
file_path = paste0("./data/test_matrices/", test_matrices[i])
load(file_path)
}
# automaton() ------------------------------------------------------------------
automaton <- function(input_matrix, rules, max_iterations, speed) {
iteration = 0
current_matrix = input_matrix
# Living border cells in the INITIAL matrix?
border_reached = evolve(current_matrix, rules)[[2]]
while (border_reached == FALSE && iteration < max_iterations) {
next_matrix = evolve(current_matrix, rules)[[1]]
# Living border cells in the NEXT matrix?
border_reached = evolve(current_matrix, rules)[[2]]
if (border_reached == TRUE) {
break
} else {
iteration = iteration + 1
print(paste0("Time: ", iteration))
draw_pixels(next_matrix)
current_matrix = next_matrix
Sys.sleep(1 / speed)
}
}
# End while loop
if (border_reached == TRUE) {
print(paste0("Border was reached."))
}
if (iteration >= max_iterations) {
print(paste0("Maximum number of iterations reached."))
}
return()  # placeholder for list which will contain values for GUI
}
draw_pixels(glider)
automaton(glider, "B3/S23", max_iterations = 100, speed = 15)
draw_pixels(glider)
automaton(glider, "B3/S23", max_iterations = 100, speed = 15)
play()
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
my_vec = c(1, 4, 7)
my_vec[2]
draw_pixels(glider)
automaton(glider, "B3/S23", speed = 15, max_iterations = 100)
automaton <- function(input_matrix, rules, speed, max_iterations) {
iteration = 0
current_matrix = input_matrix
# Living border cells in the INITIAL matrix?
border_reached = evolve(current_matrix, rules)[[2]]
while (border_reached == FALSE && iteration < max_iterations) {
next_matrix = evolve(current_matrix, rules)[[1]]
# Living border cells in the NEXT matrix?
border_reached = evolve(current_matrix, rules)[[2]]
if (border_reached == TRUE) {
break
} else {
iteration = iteration + 1
print(paste0("Time: ", iteration))
draw_pixels(next_matrix)
current_matrix = next_matrix
Sys.sleep(1 / speed)
}
}
# End while loop
if (border_reached == TRUE) {
print(paste0("Border was reached."))
}
if (iteration >= max_iterations) {
print(paste0("Maximum number of iterations reached."))
}
return()  # placeholder for list which will contain values for GUI
}
draw_pixels(glider)
automaton(glider, "B3/S23", speed = 20, max_iterations = 100)
draw_pixels(glider)
automaton(glider, "B3/S23", speed = 50, max_iterations = 10)
draw_pixels(glider)
automaton(glider, "B3/S23", speed = 50, max_iterations = 100)
automaton(glider, "B3/S23", speed = 100, max_iterations = 100)
runApp('R')
runApp('R')
runApp('R')
runApp('R')
draw_pixels(glider)
automaton(glider, "B3/S23", speed = 10, max_iterations = 100)
runApp('R')
runApp('R')
runApp('R')
paste0(my_vec)
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
runApp('R')
image(matrix(c(0, 1), nrow = 5))
image(matrix(c(0, 1), nrow = 6))
image(matrix(c(0, 1), nrow = 6))
a <- matrix(rnorm(100), ncol = 10)
image(t(a[nrow(a):1,] ), axes=FALSE, zlim=c(-4,4), col=rainbow(21))
a <- matrix(rnorm(100), ncol = 10)
image(t(a[nrow(a):1,] ), axes=FALSE, zlim=c(-4,4), col=rainbow(21))
image(t(a[nrow(a):1,] ), axes=FALSE, zlim=c(-4,4), col=rainbow(21), useRaster = TRUE)
shiny::runApp('R')
mat1 = diag(5)
print(mat1)
image(mat1)
t_mat1 = t(mat1[nrow(mat1):1, ])
image(t_mat1)
image(t_mat1, axes = FALSE)
image(t_mat1, axes = FALSE)
# ggplot
mat2 = diag(7)
image(t(mat2))
image(mat2)
image(t_mat1, axes = FALSE)
# ggplot
mat2 = diag(7)
image(mat2)
# ggplot
mat2 = diag(7)
df <- as.data.frame(mat2)
dim(mat2)
mat2 = matrix(c(1, 0, 1), nrow = 5, ncol = 6)
mat2 = matrix(c(1, 0, 1), nrow = 5, ncol = 6)
t_mat2 = t(mat2[nrow(mat2):1, ])
image(t_mat2, axes = FALSE)
mat2 = matrix(c(1, 0, 1), nrow = 6, ncol = 4)
t_mat2 = t(mat2[nrow(mat2):1, ])
mat2 = matrix(c(1, 0, 1), nrow = 6, ncol = 4)
t_mat2 = t(mat2[nrow(mat2):1, ])
image(t_mat2, axes = FALSE)
mat2 = matrix(c(1, 0, 1), nrow = 6, ncol = 2)
t_mat2 = t(mat2[nrow(mat2):1, ])
image(t_mat2, axes = FALSE)
mat2 = matrix(c(1, 0, 1), nrow = 3, ncol = 2)
t_mat2 = t(mat2[nrow(mat2):1, ])
image(t_mat2, axes = FALSE)
dim(mat3)
# ggplot
mat3 = diag(7)
dim(mat3)
df <- as.data.frame(mat3)
library(tidyverse)
df %>%
rownames_to_column("Day") %>%
pivot_longer(-c(Day), names_to = "contacts", values_to = "counts") %>%
ggplot(aes(x=as.numeric(contacts), y=as.numeric(Day), fill=counts)) +
geom_tile() +
scale_fill_viridis_c()
head(df)
print(m3)
print(mat3)
print(df)
rownames(df)
colnames(df)
